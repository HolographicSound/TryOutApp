// 壳工程
apply plugin: 'com.android.application'

static def buildTime() {
    return new Date().format("yyyyMMdd");
}

android {

    // 签名设置
    signingConfigs{
        release{

        }
    }
	
    // 编译设置 rootProject.ext 是根目录下的 build.gradle 文件中申明的全局变量 ext
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion
    defaultConfig {
	
        applicationId "com.hjf.androidmodule"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode rootProject.ext.versionCode
        versionName rootProject.ext.versionName
		
        //将dex分包
        multiDexEnabled false

        //打包时间
        resValue "string", "build_time", buildTime()

        externalNativeBuild {
            cmake {
                cppFlags "-frtti -fexceptions"
            }
        }
    }

    buildTypes {

        release {
            //更改AndroidManifest.xml中预先定义好占位符信息
            //manifestPlaceholders = [app_icon: "@drawable/icon"]
            // 不显示Log
            buildConfigField "boolean", "LEO_DEBUG", "false"
            //是否zip对齐
            zipAlignEnabled true
            // 缩减resource文件
            shrinkResources true
            // 混淆开关
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            //签名
            signingConfig signingConfigs.release
        }

        // TODO 解析
        debug {
            //给applicationId添加后缀“.debug”
            applicationIdSuffix ".debug"
            //manifestPlaceholders = [app_icon: "@drawable/launch_beta"]
            buildConfigField "boolean", "LOG_DEBUG", "true"
            zipAlignEnabled false
            shrinkResources false
            minifyEnabled false
            debuggable true
        }
    }

    // 资源路径设置
    sourceSets {

    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])

    // 引入 ActivityRouter 的 Annotation 处理器，将会在申明组件和使用 Url 的时候使用
    annotationProcessor "com.github.mzule.activityrouter:compiler:$rootProject.annotationProcessor"

    if (isDebug.toBoolean()){
        compile project(':lib_common')
    }
    else {
        compile project(':module_main')
        compile project(':module_view')
    }
}
